generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider               = "zod-prisma-types"
  output                 = "../src/lib/validations/generated"
  addInputTypeValidation = "false"
  addSelectType          = "false"
  createInputTypes       = "false"
  addIncludeType         = "false"
  createModelTypes       = "true"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model List {
  id            Int         @id @default(autoincrement())
  name          String
  description   String
  letterboxdUrl String
  imgUrl        String
  createdBy     String
  tags          String
  createdAt     DateTime    @default(now())
  movies        MovieList[]
}

model Movie {
  id               Int         @id @default(autoincrement())
  title            String
  originalTitle    String
  originalLanguage String
  releaseDate      DateTime
  letterboxdUrl    String
  imdbId           String      @unique
  posterUrl        String
  MovieList        MovieList[]
}

model MovieList {
  id      Int   @id @default(autoincrement())
  movieId Int
  listId  Int
  list    List  @relation(fields: [listId], references: [id])
  movie   Movie @relation(fields: [movieId], references: [id])

  @@unique([movieId, listId])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  accounts      Account[]
  sessions      Session[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?
  Event      Event[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum EventType {
  BIRTHDAY
  ANNIVERSARY
  DISCORD
  IN_PERSON
  OTHER
}

model Event {
  id            String    @id
  title         String
  description   String?
  month         Int
  day           Int
  time          DateTime?
  year          Int?
  type          EventType
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdBy     String
  createdByUser User      @relation(fields: [createdBy], references: [id])

  @@map("event")
}
